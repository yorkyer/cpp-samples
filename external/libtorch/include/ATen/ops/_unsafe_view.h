#pragma once

// @generated by torchgen/gen.py from Function.h

#include <ATen/Context.h>
#include <ATen/DeviceGuard.h>
#include <ATen/TensorUtils.h>
#include <ATen/TracerMode.h>
#include <ATen/core/Generator.h>
#include <ATen/core/Reduction.h>
#include <ATen/core/Tensor.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <c10/core/TensorOptions.h>
#include <c10/util/Deprecated.h>
#include <c10/util/Optional.h>



#include <ATen/ops/_unsafe_view_ops.h>

namespace at {


// aten::_unsafe_view(Tensor self, int[] size) -> Tensor
inline at::Tensor _unsafe_view(const at::Tensor & self, at::IntArrayRef size) {
    return at::_ops::_unsafe_view::call(self, size);
}

// aten::_unsafe_view.out(Tensor self, int[] size, *, Tensor(a!) out) -> Tensor(a!)
inline at::Tensor & _unsafe_view_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef size) {
    return at::_ops::_unsafe_view_out::call(self, size, out);
}

// aten::_unsafe_view.out(Tensor self, int[] size, *, Tensor(a!) out) -> Tensor(a!)
inline at::Tensor & _unsafe_view_outf(const at::Tensor & self, at::IntArrayRef size, at::Tensor & out) {
    return at::_ops::_unsafe_view_out::call(self, size, out);
}

}
